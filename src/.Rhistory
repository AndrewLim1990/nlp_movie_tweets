data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y))
x <- rnorm(n = 50, mean = c(2,4), sd = c(0.2,0.2))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y))
x <- rnorm(n = 50, mean = c(2,4), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.1))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y))
x <- rnorm(n = 100, mean = c(2,4), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.1))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y))
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.1))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y))
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.1))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y)) +
scale_x_continuous(limits = c(0,3))
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.1))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y)) +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y)) +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.5, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.8, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- runif(n = 95, min = 0, max = 3)
x <- append(x, rnorm(n = 5, 1, 0.1))
y <- runif(n = 95, min = 0, max = 3)
y <- append(y, rnorm(n = 5, 1, 0.1))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.8, color = "blue")
x <- runif(n = 95, min = 0, max = 3)
x <- append(x, rnorm(n = 5, 1, 0.05))
y <- runif(n = 95, min = 0, max = 3)
y <- append(y, rnorm(n = 5, 1, 0.05))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.8, color = "blue")
x <- runif(n = 90, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.05))
y <- runif(n = 90, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.05))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.8, color = "blue")
x <- runif(n = 90, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.05))
y <- runif(n = 90, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.05))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.8, color = "blue")
x <- runif(n = 90, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.05))
y <- runif(n = 90, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.05))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.8, color = "blue")
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.7, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- runif(n = 90, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.03))
y <- runif(n = 90, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.7, color = "blue")
x <- runif(n = 90, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.03))
y <- runif(n = 90, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.7, color = "blue")
x <- rnorm(90, 0, 0.03)
x <- append(x, runif(10, 0, 3))
y <- rnorm(90, 0, 0.03)
y <- append(y, runif(10, 0, 3))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.7, color = "blue")
x <- rnorm(90, 0, 0.03)
x <- append(x, runif(10, 0, 3))
y <- rnorm(90, 0, 0.03)
y <- append(y, runif(10, 0, 3))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.3, color = "blue")
x <- runif(n = 90, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.03))
y <- runif(n = 90, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.3, color = "blue")
x <- rnorm(n = 100, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- rnorm(n = 200, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- runif(n = 190, min = 0, max = 3)
x <- append(x, rnorm(n = 10, 1, 0.03))
y <- runif(n = 190, min = 0, max = 3)
y <- append(y, rnorm(n = 10, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue")
x <- runif(n = 180, min = 0, max = 3)
x <- append(x, rnorm(n = 20, 1, 0.03))
y <- runif(n = 180, min = 0, max = 3)
y <- append(y, rnorm(n = 20, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue")
x <- rnorm(180, 0, 0.03)
x <- append(x, runif(20, 0, 3))
y <- rnorm(180, 0, 0.03)
y <- append(y, runif(20, 0, 3))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.3, color = "blue")
library(knitr)
library(knitr)
library(lubridate)
library(tidyverse)
library(tidytext)
tweets = read.csv("../data/candidate_tweets.csv")
tweets$text <- as.character(tweets$text)
x <- rnorm(n = 200, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- runif(n = 180, min = 0, max = 3)
x <- append(x, rnorm(n = 20, 1, 0.03))
y <- runif(n = 180, min = 0, max = 3)
y <- append(y, rnorm(n = 20, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue")
x <- rnorm(180, 0, 0.03)
x <- append(x, runif(20, 0, 3))
y <- rnorm(180, 0, 0.03)
y <- append(y, runif(20, 0, 3))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.3, color = "blue")
# Get one word per row.
tweet_words <- tweets %>%
unnest_tokens(word, text)
# Clean out highly common and uninformative words.
cleaned_tweet_words <- tweet_words %>%
# Remove stop words.
anti_join(stop_words) %>%
# Remove html and retweet tokens.
filter(word != "https",
word != "t.co",
word != "rt")
breaking_tweets <- cleaned_tweet_words %>%
# Count the number of distinct authors using each word.
group_by(word) %>%
summarise(distinct_authors = n_distinct(screen_name)) %>%
# Join with the dataframe containing one row per word.
right_join(cleaned_tweet_words) %>%
# Count the number of authors tweeting words that are present in each tweet.
group_by(tweet_url) %>%
summarise(conform_score = sum(distinct_authors)) %>%
# Join with the original tweets.
right_join(tweets)
# Look at the tweets with the highest conformity score.
breaking_tweets %>% head() %>% kable()
breaking_tweets <- cleaned_tweet_words %>%
# Count the number of unique tweets and unique authors using each word.
group_by(word) %>%
summarise(distinct_tweets = n_distinct(tweet_url),
distinct_authors = n_distinct(screen_name)) %>%
arrange(desc(distinct_authors), desc(distinct_tweets)) %>%
# Join with the dataframe containing one row per word.
right_join(cleaned_tweet_words) %>%
# Count the number of authors tweeting words that are present in each tweet.
group_by(tweet_url) %>%
summarise(num_authors_tweeting_present_word = sum(distinct_authors)) %>%
# Join with the original tweets.
right_join(tweets) %>%
# Order by the tweets with the greatest number of words that are present
# across the broadest range of authors.
arrange(desc(num_authors_tweeting_present_word))
max_num_auth <- max(breaking_tweets$num_authors_tweeting_present_word)
max_fav <- max(breaking_tweets$favorite_count)
max_rt <- max(breaking_tweets$retweet_count)
breaking_tweets %>%
mutate(time_diff = as.numeric(now("UTC") - parse_date_time(created_at_stamp, "Ymd HMS"))) %>%
mutate(notif_score = (num_authors_tweeting_present_word/max_num_auth) +
(favorite_count/max_fav) +
(retweet_count/max_rt) -
time_diff) %>%
arrange(desc(notif_score))
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1))
breaking_tweets %>%
arrange(desc(conform_score)) %>%
head() %>% kable()
breaking_tweets <- cleaned_tweet_words %>%
# Count the number of distinct authors using each word.
group_by(word) %>%
summarise(distinct_authors = n_distinct(screen_name)) %>%
# Join with the dataframe containing one row per word.
right_join(cleaned_tweet_words) %>%
# Count the number of authors tweeting words that are present in each tweet.
group_by(tweet_url) %>%
summarise(conform_score = sum(distinct_authors)) %>%
# Join with the original tweets.
right_join(tweets)
# Look at the tweets with the highest conformity score.
breaking_tweets %>%
arrange(desc(conform_score)) %>%
head() %>% kable()
breaking_tweets %>%
arrange(desc(conform_score)) %>%
select(conform_score, text) %>%
head() %>% kable()
breaking_tweets <- cleaned_tweet_words %>%
# Count the number of distinct authors using each word.
group_by(word) %>%
summarise(distinct_authors = n_distinct(screen_name)) %>%
# Join with the dataframe containing one row per word.
right_join(cleaned_tweet_words) %>%
# Count the number of authors tweeting words that are present in each tweet.
group_by(tweet_url) %>%
summarise(conform_score = sum(distinct_authors)) %>%
# Join with the original tweets.
right_join(tweets)
# Look at the tweets with the highest conformity score.
breaking_tweets %>%
arrange(desc(conform_score)) %>%
select(conform_score, text) %>%
head() %>% kable()
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1))
?scales
??scales
library(scales)
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent)
library(knitr)
library(lubridate)
library(scales)
library(tidyverse)
library(tidytext)
tweets = read.csv("../data/candidate_tweets.csv")
tweets$text <- as.character(tweets$text)
x <- rnorm(n = 200, mean = c(1,2), sd = c(0.1,0.1))
y <- c()
for (i in 1:length(x)) {
y <- append(y, x[i] + rnorm(1, 0, 0.2))
}
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue") +
scale_x_continuous(limits = c(0,3)) +
scale_y_continuous(limits = c(0,3))
x <- runif(n = 180, min = 0, max = 3)
x <- append(x, rnorm(n = 20, 1, 0.03))
y <- runif(n = 180, min = 0, max = 3)
y <- append(y, rnorm(n = 20, 1, 0.03))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.4, color = "blue")
x <- rnorm(180, 0, 0.03)
x <- append(x, runif(20, 0, 3))
y <- rnorm(180, 0, 0.03)
y <- append(y, runif(20, 0, 3))
data <- data.frame(x = x, y = y)
ggplot(data) +
geom_point(aes(x = x, y = y), alpha = 0.3, color = "blue")
# Get one word per row.
tweet_words <- tweets %>%
unnest_tokens(word, text)
# Clean out highly common and uninformative words.
cleaned_tweet_words <- tweet_words %>%
# Remove stop words.
anti_join(stop_words) %>%
# Remove html and retweet tokens.
filter(word != "https",
word != "t.co",
word != "rt")
breaking_tweets <- cleaned_tweet_words %>%
# Count the number of distinct authors using each word.
group_by(word) %>%
summarise(distinct_authors = n_distinct(screen_name)) %>%
# Join with the dataframe containing one row per word.
right_join(cleaned_tweet_words) %>%
# Count the number of authors tweeting words that are present in each tweet.
group_by(tweet_url) %>%
summarise(conform_score = sum(distinct_authors)) %>%
# Join with the original tweets.
right_join(tweets)
# Look at the tweets with the highest conformity score.
breaking_tweets %>%
arrange(desc(conform_score)) %>%
select(conform_score, text) %>%
head() %>% kable()
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
?inner_join
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)^2
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)^0.5
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)^0.25
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)^0.5
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif^0.5)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif^0.25)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
reciprocal_hours_period <- 1
time_diff_prev_notif <- seq(0.5,24,0.5)
asymptote <-  0.99
threshold <- asymptote + 0.01*(1/time_diff_prev_notif)
data <- data.frame(time_diff_prev_notif = time_diff_prev_notif, threshold = threshold)
ggplot(data) +
geom_line(aes(x = time_diff_prev_notif, y = threshold)) +
geom_hline(yintercept = asymptote, color = "red") +
scale_y_continuous(limits = c(0.99, 1), labels = percent) +
ylab("Conformity score percentile threshold") +
xlab("Hours since previous notification")
